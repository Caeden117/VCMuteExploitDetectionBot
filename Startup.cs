using System.Threading.Tasks;
using DSharpPlus;
using DSharpPlus.CommandsNext;
using DSharpPlus.VoiceNext;
using Microsoft.Extensions.DependencyInjection;
using VCMuteExploitDetectionBot.Commands;
using VCMuteExploitDetectionBot.Configuration;
using VCMuteExploitDetectionBot.Services;

namespace VCMuteExploitDetectionBot
{
    public class Startup
    {
        public static async Task Start(Config config)
        {
            if (string.IsNullOrWhiteSpace(config.BotToken) || string.IsNullOrWhiteSpace(config.ChannelID))
            {
                await Logger.Critical("Startup", "Bot Token or Channel ID are not provided, cannot continue.");
                return;
            }

            var client = new DiscordClient(new DiscordConfiguration
            {
                TokenType = TokenType.Bot,
                Token = config.BotToken,
                Intents = DiscordIntents.All
            });

            client.UseVoiceNext(new VoiceNextConfiguration()
            {
                EnableIncoming = true,
            });

            await Logger.Info("Startup", "Starting...");

            await client.InitializeAsync();
            await client.ConnectAsync();

            var channelID = ulong.Parse(config.ChannelID);
            
            var channel = await client.GetChannelAsync(channelID);

            var guild = await client.GetGuildAsync(channel.GuildId);

            await Logger.Info("Startup", $"Logged in as {client.CurrentUser.Username ?? "NULL"}");
            
            if (channel != null && channel.Type != ChannelType.Voice)
            {
                await Logger.Critical("Startup", "Specified channel does not exist, or is not a Voice Channel.");

                return;
            }

            await Logger.Info("Startup", "Ready to go.");

            var serviceProvider = new ServiceCollection()
                .AddSingleton(client)
                .AddSingleton(config)
                .AddSingleton(channel)
                .AddSingleton(guild)
                .AddSingleton<MuteDetectionService>()
                .AddSingleton<ExploitDetectionService>()
                .AddSingleton<InactivityRestartTimerService>()
                .AddSingleton<ExploitPunishmentService>()
                .AddSingleton<LogToChannelService>()
                .AddSingleton<VoiceChannelUserCountMonitorService>()
                .BuildServiceProvider();

            var commands = client.UseCommandsNext(new CommandsNextConfiguration()
            {
                Services = serviceProvider,
                EnableMentionPrefix = true
            });

            commands.RegisterCommands<ResetCommandModule>();

            // Trigger our DI system by requesting our main services.
            serviceProvider.GetRequiredService<ExploitPunishmentService>();
            serviceProvider.GetRequiredService<LogToChannelService>();
            serviceProvider.GetRequiredService<VoiceChannelUserCountMonitorService>();
        }
    }
}
