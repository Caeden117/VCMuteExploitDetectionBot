using System;
using System.ComponentModel;
using System.Diagnostics;
using System.IO;
using System.Threading.Tasks;
using DSharpPlus;
using DSharpPlus.VoiceNext;
using Microsoft.Extensions.DependencyInjection;
using VCMuteExploitDetectionBot.Configuration;
using VCMuteExploitDetectionBot.Services;

namespace VCMuteExploitDetectionBot
{
    public class Startup
    {
        private static Config config;

        public static async Task Start()
        {
            var configLocation = Path.Combine(Environment.CurrentDirectory, "config.yaml");

            if (!File.Exists(configLocation))
            {
                await Logger.Critical("Startup", "Config file does not exist.");

                return;
            }

            config = await Config.DeserializeFromFile(configLocation);

            if (config is null)
            {
                await Logger.Critical("Startup", "Config could not be read. Please check that it is valid.");

                return;
            }

            if (string.IsNullOrWhiteSpace(config.BotToken) || string.IsNullOrWhiteSpace(config.ChannelID))
            {
                await Logger.Critical("Startup", "Bot Token or Channel ID are not provided, cannot continue.");
                return;
            }

            var client = new DiscordClient(new DiscordConfiguration
            {
                TokenType = TokenType.Bot,
                Token = config.BotToken
            });

            client.UseVoiceNext(new VoiceNextConfiguration()
            {
                EnableIncoming = true
            });

            await Logger.Info("Startup", "Starting...");

            await client.InitializeAsync();
            await client.ConnectAsync();

            var channelID = ulong.Parse(config.ChannelID);
            var guildID = ulong.Parse(config.GuildID);

            var guild = await client.GetGuildAsync(guildID, true);
            await guild.GetMemberAsync(client.CurrentUser.Id);
            var channel = guild.GetChannel(channelID);

            await Logger.Info("Startup", $"Logged in as {guild.CurrentMember?.Username ?? "NULL"}");

            if (channel != null && channel.Type != ChannelType.Voice)
            {
                await Logger.Critical("Startup", "Specified channel does not exist, or is not a Voice Channel.");

                return;
            }

            await Logger.Info("Startup", $"Connecting to voice channel...");

            var audioClient = await channel.ConnectAsync();

            var serviceProvider = new ServiceCollection()
                .AddSingleton(client)
                .AddSingleton(config)
                .AddSingleton(audioClient)
                .AddSingleton(channel)
                .AddSingleton(channel.Guild)
                .AddSingleton<MuteDetectionService>()
                .AddSingleton<ExploitDetectionService>()
                .AddSingleton<ExploitPunishmentService>()
                .BuildServiceProvider();

            // Trigger our DI system by requesting our main service.
            serviceProvider.GetRequiredService<ExploitPunishmentService>();

            await Logger.Info("Startup", "Ready to go.");
        }
    }
}
