using DSharpPlus.VoiceNext;
using DSharpPlus.VoiceNext.EventArgs;
using System;
using System.Collections.Concurrent;
using System.Threading.Tasks;
using VCMuteExploitDetectionBot.Configuration;

namespace VCMuteExploitDetectionBot.Services
{
    public class ExploitDetectionService
    {
        public event Action<ulong> FakeMuteExploitDetected;
        private readonly MuteDetectionService muteDetection;
        private readonly int sensitivity;

        private readonly ConcurrentDictionary<ulong, int> exploitDetectionHits = new();

        public ExploitDetectionService(VoiceNextConnection client, MuteDetectionService detection, Config config)
        {
            muteDetection = detection;
            sensitivity = config.DetectionSensitivity;

            client.VoiceReceived += Client_VoiceReceived;
        }

        private async Task Client_VoiceReceived(VoiceNextConnection _, VoiceReceiveEventArgs e)
        {
            if (e.User is null) return;

            var userID = e.User.Id;

            // We go by the available frames to tell if a user is speaking,
            // then check if the user is also self muted or deafened.
            if (muteDetection.CurrentVoiceStates.TryGetValue(userID, out var voiceState)
                && (voiceState.IsSelfMuted || voiceState.IsSelfDeafened))
            {

                // Because of false positives when users mute themselves while speaking,
                // we have a system that only triggers exploit punishment when the user
                // triggers the exploit detection multiple consecutive times.
                exploitDetectionHits.AddOrUpdate(userID, 1, (_, oldValue) => ++oldValue);

                exploitDetectionHits.TryGetValue(userID, out int hits);

                await Logger.Debug("Exploit", $"{userID} potentially using exploit. ({hits} / {sensitivity})");

                if (hits >= sensitivity)
                {
                    // The user is utilizing an exploit to lie about their self mute/deafened state.
                    // Time to take action.
                    await Logger.Warning("Exploit", $"Detected {userID} using a voice chat exploit.");

                    FakeMuteExploitDetected?.Invoke(userID);
                }
            }
            else
            {
                // No suspicious activity, reset our counter.
                exploitDetectionHits.AddOrUpdate(userID, 0, (_, _) => 0);
            }
        }
    }
}
