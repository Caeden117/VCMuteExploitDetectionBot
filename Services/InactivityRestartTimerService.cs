using DSharpPlus;
using System.Timers;
using VCMuteExploitDetectionBot.Configuration;

namespace VCMuteExploitDetectionBot.Services
{
    public class InactivityRestartTimerService
    {
        private readonly DiscordClient client;
        private readonly ExploitDetectionService detectionService;
        private readonly Timer restartTimer;

        public InactivityRestartTimerService(DiscordClient client, ExploitDetectionService detectionService, Config config)
        {
            this.client = client;
            this.detectionService = detectionService;

            restartTimer = new Timer();

            if (config.InactiveRestartTimerDuration > 0f)
            {
                restartTimer.Enabled = true;
                // We need to convert from config's Minutes to Timer's milliseconds
                restartTimer.Interval = config.InactiveRestartTimerDuration * 60000d;
            }

            restartTimer.Elapsed += Stopwatch_Elapsed;
        }

        public void DisableTimer() => restartTimer.Stop();

        public void EnableTimer() => restartTimer.Start();

        private async void Stopwatch_Elapsed(object sender, ElapsedEventArgs e)
        {
            await Logger.Info("Restart", "Inactivity restart timer has been reached, restarting...");
            detectionService.Disable();
            await client.ReconnectAsync(true);
        }
    }
}
