using DSharpPlus;
using DSharpPlus.Entities;
using System;
using System.Threading.Tasks;
using VCMuteExploitDetectionBot.Configuration;

namespace VCMuteExploitDetectionBot.Services
{
    public class ExploitPunishmentService
    {
        private readonly DiscordClient client;
        private readonly DiscordGuild guild;
        private readonly Config config;
        private Task resetTask;

        public ExploitPunishmentService(DiscordClient client, DiscordGuild guild, ExploitDetectionService detection, Config config)
        {
            this.client = client;
            this.guild = guild;
            this.config = config;

            detection.FakeMuteExploitDetected += Detection_FakeMuteExploitDetected;
        }

        private async void Detection_FakeMuteExploitDetected(AbuseTracker detectedUser, DiscordUser user)
        {
            if (!resetTask?.IsCompleted ?? false) return;

            await Logger.Warning("Exploit", $"Detected {detectedUser.UserID} speaking while muted for {(DateTime.Now - detectedUser.FirstHit)?.TotalSeconds} seconds.");

            // We put this on its own thread since it shouldn't interrupt any of this code
            resetTask = Task.Run(async () => await Cooldown(detectedUser));

            if (!config.BanDetectedUsers) return;

            var member = await guild.GetMemberAsync(detectedUser.UserID);

            try
            {
                await member.SendMessageAsync($"You have been banned from {guild.Name} because you were detected using a voice chat exploit.\n\n" +
                    "If you believe this is an error, please contact the server administrators.");
            }
            catch(Exception e)
            {
                await Logger.Warning("Exploit", $"Unable to send a DM to {member.DisplayName}#{member.Discriminator} [{detectedUser.UserID}]: {e.Message}");
            }

            try
            {
                await guild.BanMemberAsync(member, 0, $"{client.CurrentUser.Username}: Detected abuse of the Fake Mute exploit");
            }
            catch(Exception e)
            {
                await Logger.Error("Exploit", $"Unable to ban {member.DisplayName}#{member.Discriminator} [{detectedUser.UserID}]: {e.Message}");
            }
        }

        private static async Task Cooldown(AbuseTracker detectedUser)
        {
            await Task.Delay(1000);

            detectedUser.Reset();
        }
    }
}
