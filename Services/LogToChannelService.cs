using DSharpPlus;
using DSharpPlus.Entities;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using VCMuteExploitDetectionBot.Configuration;

namespace VCMuteExploitDetectionBot.Services
{
    public class LogToChannelService
    {
        private readonly DiscordChannel logChannel;
        private readonly Config config;

        public LogToChannelService(ExploitDetectionService exploitDetection, Config config, DiscordGuild guild)
        {
            this.config = config;

            if (string.IsNullOrWhiteSpace(config.LogChannelID)) return;

            var logChannelID = ulong.Parse(config.LogChannelID);

            logChannel = guild.GetChannel(logChannelID);

            exploitDetection.FakeMuteExploitDetected += ExploitDetection_FakeMuteExploitDetected;
        }

        private async void ExploitDetection_FakeMuteExploitDetected(AbuseTracker obj, DiscordUser user)
        {
            var embed = new DiscordEmbedBuilder()
                .WithTitle("🔊 Fake Mute/Deaf Exploit Detected")
                .WithAuthor($"{user.Username}#{user.Discriminator} [{user.Id}]", null, user.GetAvatarUrl(ImageFormat.Auto))
                .WithColor(new DiscordColor(config.LogChannelEmbedColor))
                .WithFooter(logChannel.Guild.Name)
                .WithTimestamp(DateTime.Now)
                .AddField("Voice Channel", $"<#{config.ChannelID}>", true)
                .AddField("Action Taken", config.BanDetectedUsers ? "This user was banned." : "No action taken.", true)
                .Build();

            await logChannel.SendMessageAsync(null, false, embed);
        }
    }
}
