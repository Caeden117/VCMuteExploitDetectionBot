using DSharpPlus;
using DSharpPlus.Entities;
using System;
using VCMuteExploitDetectionBot.Configuration;

namespace VCMuteExploitDetectionBot.Services
{
    public class LogToChannelService
    {
        private readonly Config config;
        private readonly DiscordClient client;
        private readonly ulong logChannelID;

        public LogToChannelService(ExploitDetectionService exploitDetection, Config config, DiscordClient client)
        {
            this.config = config;
            this.client = client;

            if (string.IsNullOrWhiteSpace(config.LogChannelID)) return;

            logChannelID = ulong.Parse(config.LogChannelID);

            exploitDetection.FakeMuteExploitDetected += ExploitDetection_FakeMuteExploitDetected;
        }

        private async void ExploitDetection_FakeMuteExploitDetected(AbuseTracker _, DiscordUser user)
        {
            if (user is null)
            {
                await Logger.Error("Log Channel", "User who attempted exploit is somehow null; cannot continue logging.");
                return;
            }

            var logChannel = await client.GetChannelAsync(logChannelID);

            if (logChannel is null)
            {
                await Logger.Error("Log Channel", "Logging channel is null; cannot continue logging.");
                return;
            }

            var embed = new DiscordEmbedBuilder()
                .WithTitle("🔊 Fake Mute/Deaf Exploit Detected")
                .WithAuthor($"{user.Username}#{user.Discriminator} [{user.Id}]", null, user.GetAvatarUrl(ImageFormat.Auto))
                .WithColor(new DiscordColor(config.LogChannelEmbedColor))
                .WithFooter(logChannel.Guild?.Name ?? "null (hmmm - this shouldn't happen)")
                .WithTimestamp(DateTime.Now)
                .AddField("Voice Channel", $"<#{config.ChannelID}>", true)
                .AddField("Action Taken", config.BanDetectedUsers ? "This user was banned." : "No action taken.", true)
                .Build();

            await logChannel.SendMessageAsync(embed);
        }
    }
}
