using DSharpPlus;
using DSharpPlus.Entities;
using System.Linq;
using System.Threading.Tasks;
using VCMuteExploitDetectionBot.Configuration;

namespace VCMuteExploitDetectionBot.Services
{
    public class VoiceChannelUserCountMonitorService
    {
        private readonly ExploitDetectionService detectionService;
        private readonly DiscordChannel channel;
        private readonly DiscordClient client;
        private readonly Config config;

        public VoiceChannelUserCountMonitorService(DiscordChannel channel, DiscordClient client,
            ExploitDetectionService detectionService, Config config)
        {
            this.detectionService = detectionService;
            this.channel = channel;
            this.config = config;
            this.client = client;

            client.VoiceStateUpdated += Client_VoiceStateUpdated;
            client.Resumed += Client_Ready;
            client.Ready += Client_Ready;

            // We manually call the event ourselves to have the bot automatically join the VC (if it deems it necessary) on launch
            Client_VoiceStateUpdated(client, null).GetAwaiter().GetResult();
        }

        private async Task Client_Ready(DiscordClient sender, DSharpPlus.EventArgs.ReadyEventArgs e)
        {
            await Logger.Warning("Monitor", "Detected client reconnect; attempting channel check...");

            detectionService.Disable();

            // Okay now trust me here; I dont know WHY this needs to be run as its own Task in order for it to work
            // .......but it does.
            // Random bullshit, go!
            _ = Task.Run(async () =>
            {
                await client.GetGuildAsync(channel.GuildId, true);

                await channel.Guild.GetMemberAsync(client.CurrentUser.Id);

                await Client_VoiceStateUpdated(sender, null);
            });
        }

        private async Task Client_VoiceStateUpdated(DiscordClient sender, DSharpPlus.EventArgs.VoiceStateUpdateEventArgs __)
        {
            var userCount = channel.Users.Count(x => x.Id != client.CurrentUser.Id);

            if (userCount >= config.MinimumUserCount && !detectionService.Enabled)
            {
                await Logger.Warning("Monitor", $"Users detected, joining voice channel...");

                // I do not get why DSharpPlus enforces a max execution time on their async events,
                // and at this point I'm getting really sick of them.
                _ = Task.Run(async () => await detectionService.Enable(channel));
            }
            else if (userCount < config.MinimumUserCount && detectionService.Enabled)
            {
                await Logger.Warning("Monitor", $"No other users detected, leaving voice channel...");

                detectionService.Disable();
            }
        }
    }
}
