using DSharpPlus;
using DSharpPlus.Entities;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using VCMuteExploitDetectionBot.Configuration;

namespace VCMuteExploitDetectionBot.Services
{
    public class VoiceChannelUserCountMonitorService
    {
        private readonly ExploitDetectionService detectionService;
        private readonly DiscordChannel channel;
        private readonly DiscordClient client;
        private readonly Config config;

        public VoiceChannelUserCountMonitorService(DiscordChannel channel, DiscordClient client,
            ExploitDetectionService detectionService, Config config)
        {
            this.detectionService = detectionService;
            this.channel = channel;
            this.config = config;
            this.client = client;

            client.VoiceStateUpdated += Client_VoiceStateUpdated;
        }

        private async Task Client_VoiceStateUpdated(DiscordClient sender, DSharpPlus.EventArgs.VoiceStateUpdateEventArgs e)
        {
            if (channel.Users.Count() >= config.MinimumUserCount && !detectionService.Enabled)
            {
                await Logger.Warning("Monitor", $"Users detected, joining voice channel...");

                // Yeah... this needs to be on its own thread. If not, DSharpPlus gets bitchy and says that
                // the event handler took too long and it'll break the whole system.
                new Thread(async () => await detectionService.Enable(channel)).Start();
            }
            else if ((channel.Users.Count() < config.MinimumUserCount || channel.Users.All(x => x.Id == client.CurrentUser.Id)) && detectionService.Enabled)
            {
                await Logger.Warning("Monitor", $"No other users detected, leaving voice channel...");

                detectionService.Disable();
            }
        }
    }
}
