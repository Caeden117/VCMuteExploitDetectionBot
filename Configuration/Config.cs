using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading.Tasks;

namespace VCMuteExploitDetectionBot.Configuration
{
    public class Config
    {
        /// <summary>
        /// The token to the Bot user that this program will connect to Discord with.
        /// </summary>
        public string BotToken = null;

        /// <summary>
        /// The string ID to a valid Voice Channel for the bot to monitor.
        /// </summary>
        public string ChannelID = null;

        /// <summary>
        /// How many users must already be connected to the voice channel before the bot joins and monitors.
        /// A value of 0 will force it to always be connected.
        /// </summary>
        public int MinimumUserCount = 1;

        /// <summary>
        /// The amount of time that a user can speak while being self-muted before the bot takes action.
        /// A higher number means a higher delay, but less false positives.
        /// </summary>
        public float TimeThreshold;

        /// <summary>
        /// Whether or not this bot will ban users who trigger mute exploit detection.
        /// </summary>
        public bool BanDetectedUsers;

        /// <summary>
        /// Channel to post logged events.
        /// </summary>
        public string LogChannelID = null;

        /// <summary>
        /// Color for logged embeds
        /// </summary>
        public string LogChannelEmbedColor = "#E74C3C";

        public IEnumerable<string> RestartCommandAccessRoles = Enumerable.Empty<string>();

        public static async Task<Config> DeserializeFromFile(string path)
        {
            try
            {
                if (File.Exists(path))
                {
                    var file = await File.ReadAllLinesAsync(path);

                    foreach (var line in file)
                    {
                        if (line.StartsWith('#') || !line.Contains('=')) continue;

                        var splitLine = line.Split('=');

                        Environment.SetEnvironmentVariable(splitLine[0].Trim(), splitLine[1].Trim());
                    }
                }

                return new Config
                {
                    BotToken = GetFromEnvironment("BOT_TOKEN"),
                    ChannelID = GetFromEnvironment("CHANNEL_ID"),
                    LogChannelID = GetFromEnvironment("LOG_CHANNEL_ID"),
                    MinimumUserCount = int.Parse(GetFromEnvironment("MINIMUM_USER_COUNT")),
                    TimeThreshold = float.Parse(GetFromEnvironment("TIME_THRESHOLD")),
                    BanDetectedUsers = bool.Parse(GetFromEnvironment("BAN_DETECTED_USERS")),
                    LogChannelEmbedColor = GetFromEnvironment("LOG_CHANNEL_EMBED_COLOR", "#E74C3C"),
                    RestartCommandAccessRoles = GetFromEnvironment("RESTART_COMMAND_ACCESS_ROLES").Split(',').Select(x => x.Trim())
                };
            }
            catch
            {
                return null;
            }
        }

        private static string GetFromEnvironment(string token, string defaultValue = "")
        {
            var environmentString = Environment.GetEnvironmentVariable(token);

            return string.IsNullOrWhiteSpace(environmentString)
                ? defaultValue
                : environmentString;
        }
    }
}
