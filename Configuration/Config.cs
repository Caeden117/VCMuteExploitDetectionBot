using System;
using System.IO;
using System.Threading.Tasks;

namespace VCMuteExploitDetectionBot.Configuration
{
    public class Config
    {
        private const string BotTokenString = "BOT_TOKEN";
        private const string GuildIDString = "GUILD_ID";
        private const string ChannelIDString = "CHANNEL_ID";
        private const string MinimumUserCountString = "MINIMUM_USER_COUNT";
        private const string DetectionSensitivityString = "DETECTION_SENSITIVITY";
        private const string BanDetectedUsersString = "BAN_DETECTED_USERS";
        private const string LogChannelIDString = "LOG_CHANNEL_ID";

        /// <summary>
        /// The token to the Bot user that this program will connect to Discord with.
        /// </summary>
        public string BotToken = null;

        /// <summary>
        /// The string ID to the Guild that the bot will be monitoring in.
        /// </summary>
        public string GuildID = null;

        /// <summary>
        /// The string ID to a valid Voice Channel for the bot to monitor.
        /// </summary>
        public string ChannelID = null;

        /// <summary>
        /// How many users must already be connected to the voice channel before the bot joins and monitors.
        /// A value of 0 will force it to always be connected.
        /// </summary>
        public int MinimumUserCount = 1;

        /// <summary>
        /// How many consecutive detections are required to trigger a punishment.
        /// </summary>
        public int DetectionSensitivity;

        /// <summary>
        /// Whether or not this bot will ban users who trigger mute exploit detection.
        /// </summary>
        public bool BanDetectedUsers;

        /// <summary>
        /// Channel to post logged events.
        /// </summary>
        public string LogChannelID = null;

        public static async Task<Config> DeserializeFromFile(string path)
        {
            try
            {
                var file = await File.ReadAllLinesAsync(path);

                foreach (var line in file)
                {
                    if (!line.Contains('=')) throw new ArgumentException("Invalid format.");

                    var splitLine = line.Split('=');

                    Environment.SetEnvironmentVariable(splitLine[0].Trim(), splitLine[1].Trim());
                }

                return new Config
                {
                    BotToken = Environment.GetEnvironmentVariable(BotTokenString),
                    GuildID = Environment.GetEnvironmentVariable(GuildIDString),
                    ChannelID = Environment.GetEnvironmentVariable(ChannelIDString),
                    MinimumUserCount = int.Parse(Environment.GetEnvironmentVariable(MinimumUserCountString)),
                    DetectionSensitivity = int.Parse(Environment.GetEnvironmentVariable(DetectionSensitivityString)),
                    BanDetectedUsers = bool.Parse(Environment.GetEnvironmentVariable(BanDetectedUsersString)),
                    LogChannelID = Environment.GetEnvironmentVariable(LogChannelIDString),
                };
            }
            catch
            {
                return null;
            }
        }
    }
}
