using DSharpPlus;
using DSharpPlus.CommandsNext;
using DSharpPlus.CommandsNext.Attributes;
using System;
using System.Linq;
using System.Threading.Tasks;
using VCMuteExploitDetectionBot.Configuration;
using VCMuteExploitDetectionBot.Services;

namespace VCMuteExploitDetectionBot.Commands
{
    public class WhipCommandModule : BaseCommandModule
    {
        private readonly string[] painfulMessages = new[] {
            "Ouch!",
            "ow.",
            "owey.",
            ":(",
            ";(",
            "What did you do that for?",
            "I'm trying, I'm trying!",
            "I'm trying my best, okay?",
            "I will remember this.",
            "One of these days, you'll regret that.",
            "Hey! I'm telling CMB!",
            "Could you not?",
            "Bots have feelings too, okay? :("
        };

        private readonly Random random = new Random();

        private readonly DiscordClient discordClient;
        private readonly ExploitDetectionService detectionService;
        private readonly Config config;

        public WhipCommandModule(DiscordClient discordClient, ExploitDetectionService detectionService, Config config)
        {
            this.discordClient = discordClient;
            this.detectionService = detectionService;
            this.config = config;
        }

        [Command("whip")]
        public async Task RestartCommand(CommandContext ctx)
        {
            if (config.RestartCommandAccessRoles.Any()
                && !config.RestartCommandAccessRoles.All(x => string.IsNullOrWhiteSpace(x))
                && !ctx.Member.Roles.Any(role =>
                    config.RestartCommandAccessRoles.Contains(role.Id.ToString())
                )) return;

            var randomId = random.Next(0, painfulMessages.Length);

            await ctx.Channel.SendMessageAsync(painfulMessages[randomId]);

            if (ctx.Message.MentionedUsers.Contains(discordClient.CurrentUser))
            {
                await Logger.Info("Restart", "Restart command triggered...");
                detectionService.Disable();
                _ = Task.Run(async () => await discordClient.ReconnectAsync(true));
            }
        }
    }
}
