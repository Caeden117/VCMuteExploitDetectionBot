using DSharpPlus;
using DSharpPlus.CommandsNext;
using DSharpPlus.CommandsNext.Attributes;
using System;
using System.Linq;
using System.Threading.Tasks;
using VCMuteExploitDetectionBot.Configuration;
using VCMuteExploitDetectionBot.Services;

namespace VCMuteExploitDetectionBot.Commands
{
    public class ResetCommandModule : BaseCommandModule
    {
        private readonly DiscordClient discordClient;
        private readonly ExploitDetectionService detectionService;
        private readonly Config config;

        public ResetCommandModule(DiscordClient discordClient, ExploitDetectionService detectionService, Config config)
        {
            this.discordClient = discordClient;
            this.detectionService = detectionService;
            this.config = config;
        }

        [Command("restart")]
        public async Task RestartCommand(CommandContext ctx)
        {
            if (config.RestartCommandAccessRoles.Any() &&
                !ctx.Member.Roles.Any(role => 
                    config.RestartCommandAccessRoles.Contains(role.Id.ToString())
                )) return;

            if (ctx.Message.MentionedUsers.Contains(discordClient.CurrentUser))
            {
                await Logger.Info("Restart", "Restart command triggered...");
                detectionService.Disable();
                _ = Task.Run(async() => await discordClient.ReconnectAsync(true));
            }
        }
    }
}
